{
  // Place your abude-backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "New DAO": {
    "prefix": "+dao",
    "description": "New DAO",
    "body": [
      "type $1Service struct {",
      "\tdb *gorm.DB",
      "}",
      "",
      "func New$1Service(db *gorm.DB) *$1Service {",
      "\treturn &$1Service{db}",
      "}"
    ]
  },
  "New Controller": {
    "prefix": "+ctrl",
    "description": "New Controller",
    "body": [
      "type $1Controller struct {",
      "\t*common.BaseController",
      "\tservice *$1Service",
      "}",
      "",
      "func New$1Controller(ctrl *common.BaseController, service *$1Service) *$1Controller {",
      "\treturn &$1Controller{ctrl, service}",
      "}"
    ]
  },
  "Create DAO Service": {
    "prefix": "++dao",
    "body": [
      "type $1Service struct {",
      "\tdb *gorm.DB",
      "}",
      "",
      "func NewService(db *gorm.DB) *$1Service {",
      "\treturn &$1Service{db}",
      "}",
      "",
      "func (s *$1Service) FindOne(id int) (*$2, error) {",
      "\tvar $3 $2",
      "\tif err := s.db.First(&$3, id).Error; err != nil {",
      "\t\treturn nil, exception.DB(err)",
      "\t}",
      "",
      "\treturn &$3, nil",
      "}",
      "",
      "func (s *$1Service) FindAll(query pagination.Pagination) *pagination.Result[$2] {",
      "\tresult := pagination.New[$2](query)",
      "",
      "\tdb := s.db.Model(&$2{})",
      "",
      "\tdb.Order(\"created_at DESC\")",
      "",
      "\treturn result.Paginate(db)",
      "}",
      "",
      "func (s *$1Service) Create(data interface{}) (*$2, error) {",
      "\t$3 := $2{}",
      "",
      "\tif err := s.db.Create(&$3).Error; err != nil {",
      "\t\treturn nil, exception.DB(err)",
      "\t}",
      "",
      "\treturn &$3, nil",
      "}",
      "",
      "func (s *$1Service) Update(id int, data interface{}) (*$2, error) {",
      "\tvar $3 $2",
      "\tif err := s.db.First(&$3, id).Error; err != nil {",
      "\t\treturn nil, exception.DB(err)",
      "\t}",
      "",
      "\tif err := s.db.Save(&$3).Error; err != nil {",
      "\t\treturn nil, exception.DB(err)",
      "\t}",
      "",
      "\treturn &$3, nil",
      "}",
      "",
      "func (s *$1Service) Delete(id int) (*$2, error) {",
      "\tvar $3 $2",
      "\tif err := s.db.First(&$3, id).Error; err != nil {",
      "\t\treturn nil, exception.DB(err)",
      "\t}",
      "",
      "\tif err := s.db.Delete(&$3).Error; err != nil {",
      "\t\treturn nil, exception.DB(err)",
      "\t}",
      "",
      "\treturn &$3, nil",
      "}",
      "",
      "func (s *$1Service) Using(tx *gorm.DB) *$1Service {",
      "\tdb := s.db",
      "",
      "\tdefer func() {",
      "\t\ts.db = db",
      "\t}()",
      "",
      "\ts.db = tx.WithContext(tx.Statement.Context)",
      "",
      "\treturn s",
      "}",
      "",
      "func (s *$1Service) WithContext(ctx context.Context) *$1Service {",
      "\ts.db = s.db.WithContext(ctx)",
      "",
      "\treturn s",
      "}"
    ],
    "description": "Create DAO Service"
  }
}
